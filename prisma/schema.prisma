// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String    @unique
  email           String    @unique
  profileImage    String?
  hashedPassword  String
  recepies        Recepie[]
  comments        Comment[]
  accounts        Account[]
  likes              Like[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Recepie {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  servings           String?
  title              String
  time               String?
  ingredients        String[]
  intructions        String[]
  kuriosa            String?
  author             User @relation(fields: [authorId], references: [id])
  authorId           String     @db.ObjectId
  image              String?
  comments           Comment[]
  createdAt          DateTime @default(now())
  category           String
  likes              Like[]
}

model Comment {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  commentRating      String?
  commentbody        String
  userId             String @db.ObjectId
  recepieId          String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  recepie Recepie @relation(fields: [recepieId], references: [id], onDelete: Cascade)
}

model Like {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  author             User @relation(fields: [authorId], references: [id])
  authorId           String     @db.ObjectId
  recepieId          String @db.ObjectId
  recepie            Recepie @relation(fields: [recepieId], references: [id])

  @@unique([authorId, recepieId ])

}